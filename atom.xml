<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>For Light&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-03T04:09:15.362Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos 编译安装github</title>
    <link href="http://yoursite.com/2016/09/03/centos-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85github/"/>
    <id>http://yoursite.com/2016/09/03/centos-编译安装github/</id>
    <published>2016-09-03T02:41:45.000Z</published>
    <updated>2016-09-03T04:09:15.362Z</updated>
    
    <content type="html"><![CDATA[<h4 id="centos-编译安装最新版github"><a href="#centos-编译安装最新版github" class="headerlink" title="centos 编译安装最新版github"></a>centos 编译安装最新版github</h4><ul>
<li>通过访问<a href="https://github.com/git/git/releases" target="_blank" rel="external">https://github.com/git/git/releases</a> 网站来获取最新的github版本</li>
<li>安装依赖包<br><code>yum -y install zlib-devel curl-devel openssl-devel perl cpio expat-devel gettext-devel openssl zlib autoconf tk perl-ExtUtils-MakeMaker</code></li>
<li>通过wget下载要安装的版本<br><code>wget https://github.com/git/git/archive/v2.10.0.tar.gz</code></li>
<li>下载完成后，用tar展开归档并解压<br><code>tar xf v2.10.0.tar.gz</code></li>
<li>进入上步产生的文件<br><code>cd git-2.10.0/</code></li>
<li>执行安装命令<br><code>autoconf</code><br><code>./configure</code><br><code>make</code><br><code>make install</code></li>
<li>最后可以通过git - -version查看版本信息<br><code>git --vision</code><br>显示为<code>git version 2.10.0</code></li>
<li>我在安装过程中遇到的问题，在执行./configure时，因为没有安装gcc，提示编译错误，然后通过<code>yum -y install gcc</code>安装了gcc后，问题解决。<h4 id="安装完成后的使用"><a href="#安装完成后的使用" class="headerlink" title="安装完成后的使用"></a>安装完成后的使用</h4></li>
<li>用ssh-keygen生成密钥<code>ssh-keygen -t rsa</code>指定为rsa算法，然后将公钥放到github中去，然后使用<code>ssh -T git@github.com</code>来测试是否和自己的github连接成功</li>
<li>使用<code>`git add hello.py</code>来将文件添加到缓冲区，然后使用<code>git commit -m &quot;注释&quot;</code>提交到本地库，此时github中没有改变。</li>
<li>可以用<code>git rm hello.py</code>来删除本地库中的内容</li>
<li>然后使用<code>git remote add XXX url</code>,其中XXX是为url设置的别名，url为你要提交到github中的ssh链接，如<code>git remote add python git@github.com:zz-1996/python.git</code>这个就是为后面的链接提供一个别名，为python，方便以后提交代码</li>
<li>用<code>git push -u XXX master</code>将本地库中的文件提交到以XXX为别名的github服务器上，例如：<code>git push  -u python</code>,将本地库中的文件提交到github服务器上</li>
</ul>
]]></content>
    
    <summary type="html">
    
      github的安装与使用
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记-1</title>
    <link href="http://yoursite.com/2016/08/15/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/2016/08/15/python学习笔记-1/</id>
    <published>2016-08-15T02:59:21.000Z</published>
    <updated>2016-09-03T04:48:04.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h4><ul>
<li>print的用法<ul>
<li>print ‘hello world’  打印hello world</li>
<li>还有和C语言的printf()很像的语法，用%来实现字符串的替换功能，例如：print “%s is number %d”%(‘Python’,1)输出为Python is number one</li>
<li>print也支持将输出重定向到文件中，用&gt;&gt;符号来实现,例如：</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logfile = open(<span class="string">'E:/Python/log/mylog.txt'</span>,<span class="string">'a'</span>)</div><div class="line"><span class="keyword">print</span> &gt;&gt; logfile, <span class="string">'Fatal error : invalid input !'</span></div><div class="line">logfile.close()</div></pre></td></tr></table></figure>
<p>将Fatal error : invalid input !输入到E:/Python/log/目录下的mylog.txt文件中。</p>
<ul>
<li>程序的输入<ul>
<li>使用raw_input()内建函数完成输入</li>
<li>输入的内容为字符串格式</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user = raw_input(<span class="string">'Enter login name:'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'you login is:'</span>,user</div></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter login name:jock</div><div class="line">you login <span class="keyword">is</span>: jock</div></pre></td></tr></table></figure></p>
<p>也可以输入数字，只不过要将输入的字符串类型转换为数字类型，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num = raw_input(<span class="string">'please input a number:'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Double your number:%d'</span>%(int(num)*<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">please input a number:<span class="number">3</span></div><div class="line">Double your number:<span class="number">6</span></div></pre></td></tr></table></figure></p>
<ul>
<li>注释<ul>
<li>Python添加注释的方法和shell脚本的添加注释方法相同，使用#开头，一直到行末的内容都为注释</li>
</ul>
</li>
<li>文档字符串<ul>
<li>在函数体的第一行，可以使用双引号(“)添加单行的文档字符串，也可以使用三个单引号(‘’’)或三个双引号(“””)来添加多行文档字符串</li>
<li>文档字符串的开头一般用大写字母开头，以.结束，如果有多行，则第二行为空行，第三行开始详细描述</li>
<li>文档字符串可以是我们更好的理解程序</li>
</ul>
</li>
<li>Python不支持c语言中自加(++n)或自减操作，如果在Python中执行(--n)操作，则python会将语句解释为-(-n)从而得到n，++n也同理。</li>
</ul>
<h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><ul>
<li>定义类</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(base_class[es])</span>:</span></div><div class="line"><span class="string">"optional documentation string"</span></div><div class="line">static_member_declarations</div><div class="line">method_declarations</div></pre></td></tr></table></figure>
<p>当没有可选的基类时，可以选object作为基类，class行之后是可选的文档字符串、静态成员定义及方法定义</p>
<h5 id="python中小知识点"><a href="#python中小知识点" class="headerlink" title="python中小知识点"></a>python中小知识点</h5><ul>
<li>python对象的三个属性：id、type、value</li>
<li>python中数字、字符串、元组不可更改（指的是当重新赋值时，id会改变，也就是会先生成新的对象，然后指向它），列表和字典可以更改</li>
<li>is根据id来判断是否相同，==根据value来判断是否相同</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Python学习笔记-第一天
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python学习笔记" scheme="http://yoursite.com/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 函数</title>
    <link href="http://yoursite.com/2016/08/14/Python-%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/08/14/Python-函数/</id>
    <published>2016-08-14T06:45:32.000Z</published>
    <updated>2016-09-03T04:49:08.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h4><ul>
<li>函数代码块以def开头，后接函数标识符名称和圆括号()</li>
<li>任何传入参数和自变量必须放在圆括号中间</li>
<li>函数第一行语句可以选择性的使用文档字符串，用于函数说明</li>
<li>函数内容以冒号起始，并且缩进</li>
<li>return[表达式]结束函数，不带表达式的return相当于返回None</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">( parameters )</span>:</span></div><div class="line">	<span class="string">"函数_文档字符串"</span></div><div class="line">    function_suit</div><div class="line">    <span class="keyword">return</span> [expression]</div></pre></td></tr></table></figure>
<p>例如，打印字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toString</span><span class="params">(str)</span>:</span></div><div class="line">	<span class="string">"print str"</span></div><div class="line">	<span class="keyword">print</span> str</div><div class="line">	<span class="keyword">return</span></div><div class="line">	</div><div class="line">toString(<span class="string">"abcdefg"</span>)</div></pre></td></tr></table></figure></p>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abcdefg</div></pre></td></tr></table></figure></p>
<h6 id="Python函数按值传递参数和按引用传递参数"><a href="#Python函数按值传递参数和按引用传递参数" class="headerlink" title="Python函数按值传递参数和按引用传递参数"></a>Python函数按值传递参数和按引用传递参数</h6><ul>
<li>在Python中，所有的参数传递都是按引用传递，如果在函数中修改了参数，那么原始参数也就变了，例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">( dict )</span>:</span></div><div class="line">	<span class="string">"change dic"</span></div><div class="line">	<span class="comment">#append a key and value</span></div><div class="line">	dict[<span class="string">'aa'</span>] = <span class="number">33</span></div><div class="line">	<span class="keyword">print</span> dict</div><div class="line">	<span class="keyword">return</span></div><div class="line"></div><div class="line">dict = &#123;<span class="string">'liming'</span>: <span class="number">23</span>, <span class="string">'dani'</span>: <span class="number">24</span>&#125;</div><div class="line">change(dict)</div><div class="line"><span class="keyword">print</span> dict</div></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'liming'</span>: <span class="number">23</span>, <span class="string">'aa'</span>: <span class="number">33</span>, <span class="string">'dani'</span>: <span class="number">24</span>&#125;</div><div class="line">&#123;<span class="string">'liming'</span>: <span class="number">23</span>, <span class="string">'aa'</span>: <span class="number">33</span>, <span class="string">'dani'</span>: <span class="number">24</span>&#125;</div></pre></td></tr></table></figure></p>
<h6 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h6><ul>
<li>加了*的变量名用来存放所有未命名的参数，例如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">VarPar</span><span class="params">(*a)</span>:</span></div><div class="line">	<span class="string">"print a"</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">return</span></div><div class="line">	</div><div class="line">VarPar(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</div><div class="line">VarPar(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">VarPar()</div></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line">c</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><ul>
<li>python用lambda来创建匿名函数</li>
<li>lambda只是一个表达式，函数体比def简单的多</li>
<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去</li>
<li>lambda函数拥有自己的命名空间，且不能访问自有参数列表以外或全局命名空间里的参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lambda</span> 参数：表达式</div></pre></td></tr></table></figure>
<p>例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sum = <span class="keyword">lambda</span> a1,a2: a1+a2</div><div class="line"></div><div class="line"><span class="keyword">print</span> sum(<span class="number">2</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      Python函数学习
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="python 函数" scheme="http://yoursite.com/tags/python-%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件与命令查询</title>
    <link href="http://yoursite.com/2016/08/14/Linux-%E6%96%87%E4%BB%B6%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2016/08/14/Linux-文件与命令查询/</id>
    <published>2016-08-14T03:41:38.000Z</published>
    <updated>2016-09-03T04:48:47.069Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux中文件与命令的查询"><a href="#Linux中文件与命令的查询" class="headerlink" title="Linux中文件与命令的查询"></a>Linux中文件与命令的查询</h4><ul>
<li>which<ul>
<li>which -a ：将所有PATH目录中可以找到的命令均列出来，（如果没有-a选项，只列出找到的第一个）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ which python</div><div class="line">/usr/bin/python</div></pre></td></tr></table></figure>
<ul>
<li>当在PATH目录中找不到时，会有如下提示</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">which a</div><div class="line">/usr/bin/which: <span class="function">no a <span class="title">in</span> <span class="params">(/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/zz/.local/bin:/home/zz/bin)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>whereis<ul>
<li>whereis -b：只找二进制格式的文件</li>
<li>whereis -m：只找在说明文件manual路径下的文件</li>
<li>whereis -s：只找source源文件</li>
<li>whereis -u：查找不再上述三个选项中的其他特殊文件</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ whereis ifconfig</div><div class="line">ifconfig: /usr/sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#只找出和passwd有关的”说明文件“文件名（man page）</span></div><div class="line">[zz@VM_60_195_centos ~]$ whereis -m passwd</div><div class="line">passwd: /usr/share/man/man1/passwd<span class="number">.1</span>.gz</div></pre></td></tr></table></figure>
<ul>
<li>locate <ul>
<li>locate -i：忽略大小写的差异</li>
<li>locate -r：后面可以接正则表达式的显示方式</li>
</ul>
</li>
<li>find<ul>
<li>查找在某个目录下属于某个用户的文件,例如在/home下查找属于tom的文件<br><code>find /home -user tom</code></li>
<li>按文件名查找，例如可以在/目录下查找passwd这个文件<br><code>find / -name passwd</code></li>
</ul>
</li>
<li>find的查找速度要比whereis和locate要慢，因为whereis和locate是在数据库中查找（/var/lib/mlocate）,而find是在硬盘中查找，所以速度较慢。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Linux中查找文件与命令的路径
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="命令与文件查询" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%96%87%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>touch 之修改文件时间</title>
    <link href="http://yoursite.com/2016/08/14/touch-%E4%B9%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2016/08/14/touch-之修改文件时间/</id>
    <published>2016-08-14T01:35:39.000Z</published>
    <updated>2016-08-14T02:48:49.150Z</updated>
    
    <content type="html"><![CDATA[<h4 id="touch命令之修改文件时间"><a href="#touch命令之修改文件时间" class="headerlink" title="touch命令之修改文件时间"></a>touch命令之修改文件时间</h4><ul>
<li>文件主要有三个时间，分别为：<ul>
<li>modification time（mtime）<ul>
<li>当该文件的内容数据更改时，这个时间就会更新</li>
</ul>
</li>
<li>status time（ctime）<ul>
<li>当该文件的状态改变时，也就是权限、属性等状态改变时，这个时间就会更新</li>
</ul>
</li>
<li>access time（atime）<ul>
<li>当该文件的内容被读取时，这个时间就会更新</li>
</ul>
</li>
</ul>
</li>
<li>查看文件的这三个时间戳可以使用stat命令</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">51.895696976</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">51.895696976</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">51.895696976</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div></pre></td></tr></table></figure>
<p>其中，Access表示atime，也就是内容被读取的时间，Modify表示mtime，也就是内容被修改的时间，Change表示ctime，也就是该文件状态改变的时间</p>
<ul>
<li>用touch命令修改这三个时间<ul>
<li>touch -a ：修改访问时间</li>
<li>touch -c ：仅修改文件时间，若该文件不存在则不创建新文件</li>
<li>touch -d ：后面可以接欲修改的日期而不是当前的日期，也可以用–date=“日期或时间”</li>
<li>touch -m ：仅修改mtime</li>
<li>touch -t ：后面可以接欲修改的时间而不用目前时间，格式为[YYMMDDhhmm]</li>
</ul>
</li>
<li><p>用touch命令修改访问时间（atime）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -a -t <span class="number">1502020202</span> a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2015</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">51.895696976</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">32</span>:<span class="number">32.261166992</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div></pre></td></tr></table></figure>
</li>
<li><p>用touch命令修改mtime（修改时间）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -m -t <span class="number">1302020202</span> a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2015</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2013</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">16.105408279</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div></pre></td></tr></table></figure>
</li>
<li><p>用touch命令同时修改atime和mtime：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -c -t <span class="number">1602020202</span> a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2016</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">37</span>:<span class="number">36.636446310</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div></pre></td></tr></table></figure>
</li>
<li><p>当然我们也可以不加-t参数修改为系统当前时间，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -a a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">30.583852992</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">02</span>-<span class="number">02</span> <span class="number">02</span>:<span class="number">02</span>:<span class="number">00.000000000</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">30.583852992</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -m a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">30.583852992</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">46.729626506</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">46.729626506</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ touch -c a</div><div class="line">[zz<span class="meta">@VM</span>_60_195_centos ~]$ stat a</div><div class="line">  File: <span class="string">'a'</span></div><div class="line">  Size: <span class="number">0</span>         	Blocks: <span class="number">0</span>          IO Block: <span class="number">4096</span>   regular empty file</div><div class="line">Device: fd01h/<span class="number">64769</span>d	Inode: <span class="number">278621</span>      Links: <span class="number">1</span></div><div class="line">Access: (<span class="number">0664</span>/-rw-rw-r--)  Uid: ( <span class="number">1000</span>/      zz)   Gid: ( <span class="number">1000</span>/      zz)</div><div class="line">Access: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">46</span>:<span class="number">03.685238187</span> +<span class="number">0800</span></div><div class="line">Modify: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">46</span>:<span class="number">03.685238187</span> +<span class="number">0800</span></div><div class="line">Change: <span class="number">2016</span>-<span class="number">08</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">46</span>:<span class="number">03.685238187</span> +<span class="number">0800</span></div><div class="line"> Birth: -</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      touch命令之修改文件时间
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="touch" scheme="http://yoursite.com/tags/touch/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础语法</title>
    <link href="http://yoursite.com/2016/08/13/Python-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/08/13/Python-基础语法/</id>
    <published>2016-08-13T03:34:02.000Z</published>
    <updated>2016-08-14T01:17:23.864Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h4><ul>
<li>多行语句，python一般以一行的开头作为语句的结束符，但是也可以使用\将一行语句显示为多行，例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test = i + \</div><div class="line">	   b + \</div><div class="line">       c </div><div class="line">test2 = [<span class="string">"a"</span>, <span class="string">"b"</span>, </div><div class="line">	     <span class="string">"c"</span>, <span class="string">"d"</span>]</div></pre></td></tr></table></figure>
<ul>
<li>单引号，双引号和三引号，三引号支持编写多行文本</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">w = <span class="string">'word'</span></div><div class="line">s = <span class="string">"sentence"</span></div><div class="line">p = <span class="string">""" pakj</span></div><div class="line">sjdlk"""</div></pre></td></tr></table></figure>
<ul>
<li>注释，单行注释用#，多行注释用三个单引号或三个双引号</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#单行注释</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">多行</div><div class="line">注释</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">多行</div><div class="line">注释</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>python也可以在同一行使用多条语句，语句之间用；分割（和shell脚本类似）</p>
<h4 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h4><ul>
<li>python中的变量赋值不需要类型声明，但每个变量在使用之前一定要先赋值，变量赋值以后才会被创建</li>
<li><p>python允许同时为多个变量赋值，例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = b = c = <span class="number">1</span></div><div class="line">d, e, f = <span class="number">1</span>, <span class="string">'abcd'</span>, <span class="number">3</span></div></pre></td></tr></table></figure>
</li>
<li><p>python 有五个标准数据类型，为：</p>
<ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>List （列表）</li>
<li>Tuple （元组）</li>
<li>Dictionary（字典）</li>
</ul>
</li>
</ul>
<h6 id="Python数字类型"><a href="#Python数字类型" class="headerlink" title="Python数字类型"></a>Python数字类型</h6><ul>
<li>python支持四种不同的数字类型：<ul>
<li>int（有符号整形）</li>
<li>long（长整形）</li>
<li>float（浮点型）</li>
<li>complex（复数）</li>
</ul>
</li>
</ul>
<ul>
<li>长整形后面要跟l或者L，推荐使用L，以免和数字1分不清楚</li>
<li>复数是由实数部分和虚数部分构成，可以是a+bj，或者complex（a，b）表示，a和b都是浮点型。</li>
</ul>
<h6 id="Python字符串类型"><a href="#Python字符串类型" class="headerlink" title="Python字符串类型"></a>Python字符串类型</h6><ul>
<li>字符串是由“”或‘’括起来的一串字符</li>
<li>python的字符串列表有2种取值顺序：<ul>
<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>
<li>从右到左索引默认-1开始，最大范围字符串开头<br>截取字符串可以用变量名[头下标：尾下标]，表示从头下标开始到尾下标-1的字符串，例如：str=’abcdefg’,b=str[1:4],则b输出为bcd；还有可以使用*#(#代表数字)，来输出#次字符串；也可用+来连接运算符。</li>
</ul>
</li>
</ul>
<h6 id="Python列表类型"><a href="#Python列表类型" class="headerlink" title="Python列表类型"></a>Python列表类型</h6><p>python中的列表可以完成大多数集合类的数据结构实现，它支持字符，数字，字符串甚至可以包含列表（嵌套）。<br>和字符串的大多数操作类似，例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list = [<span class="string">'abcd'</span>, <span class="number">333</span>, <span class="number">2.3</span>, <span class="string">'hello'</span>]</div><div class="line">list2 = [<span class="number">666</span>, <span class="string">'world'</span>]</div><div class="line"></div><div class="line"><span class="keyword">print</span> list <span class="comment">#输出完整的列表</span></div><div class="line"><span class="keyword">print</span> list[<span class="number">0</span>] <span class="comment">#输出列表的第一个元素</span></div><div class="line"><span class="keyword">print</span> list[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#输出第二个到第三个元素</span></div><div class="line"><span class="keyword">print</span> list[<span class="number">2</span>:]  <span class="comment">#输出第三个开始到最后一个</span></div><div class="line"><span class="keyword">print</span> list2 * <span class="number">2</span>  <span class="comment">#输出list2列表两次</span></div><div class="line"><span class="keyword">print</span> list + list2  <span class="comment">#打印组合列表</span></div></pre></td></tr></table></figure>
<h6 id="Python元组类型"><a href="#Python元组类型" class="headerlink" title="Python元组类型"></a>Python元组类型</h6><ul>
<li>元组相当于只读类型的列表，元组用（）标识，不能二次赋值。</li>
<li>元组的其他操作和列表类似</li>
</ul>
<h6 id="Python元字典类型"><a href="#Python元字典类型" class="headerlink" title="Python元字典类型"></a>Python元字典类型</h6><ul>
<li>字典中存入的是键值对，用{}来标识字典，字典是无序的对象集合，列表是有序的对象结合，例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dict = &#123;&#125;</div><div class="line">dict [<span class="string">'one'</span>] = <span class="string">"this is one"</span></div><div class="line">dict[<span class="number">2</span>] = <span class="string">"this is two"</span></div><div class="line"></div><div class="line">dict2 = &#123;<span class="string">'name'</span> : <span class="string">'zhao'</span>, <span class="string">'code'</span> : <span class="number">333</span>, <span class="string">'dept'</span> : <span class="string">'sales'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> dict[<span class="string">'one'</span>]</div><div class="line"><span class="keyword">print</span> dict[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> dict</div><div class="line"><span class="keyword">print</span> dict2</div><div class="line"><span class="keyword">print</span> dict2.keys() <span class="comment">#输出所有的键</span></div><div class="line"><span class="keyword">print</span> dict2.values() <span class="comment">#输出所以的值</span></div></pre></td></tr></table></figure>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">this <span class="keyword">is</span> one</div><div class="line">this <span class="keyword">is</span> two</div><div class="line">&#123;<span class="number">2</span>: <span class="string">'this is two'</span>, <span class="string">'one'</span>: <span class="string">'this is one'</span>&#125;</div><div class="line">&#123;<span class="string">'dept'</span>: <span class="string">'sales'</span>, <span class="string">'code'</span>: <span class="number">333</span>, <span class="string">'name'</span>: <span class="string">'zhao'</span>&#125;</div><div class="line">[<span class="string">'dept'</span>, <span class="string">'code'</span>, <span class="string">'name'</span>]</div><div class="line">[<span class="string">'sales'</span>, <span class="number">333</span>, <span class="string">'zhao'</span>]</div></pre></td></tr></table></figure></p>
<h5 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h5><ul>
<li>对内置数据类型转换，只需将数据类型作为函数名即可，例如：</li>
</ul>
<ol>
<li>int(x):将x转换为整数</li>
<li>long(x):将x转换为长整形</li>
<li>float(x):将x转换为浮点数</li>
<li>complex(real):创建一个复数</li>
<li>str(x):将对象x转换成字符串</li>
<li>repr(x)将x转换为表达式字符串</li>
<li>tuple(s):将序列s转换为元组</li>
<li>list(s):将序列s转化为列表</li>
<li>set(s):转换为可变集合</li>
<li>dict(d):创建字典，d必须是一个序列(key,value)元组</li>
<li>frozenset(s):转换为不可变集合</li>
<li>chr(x):将一个整数转换为一个字符</li>
<li>ord(x):将一个字符转换为他的整数</li>
<li>hex(x):将一个整数转换为一个十六进制的字符串</li>
<li>oct(x):将一个整数转换为一个八进制字符串</li>
</ol>
<h4 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h4><ul>
<li>Python 算术运算符<ul>
<li>+：两个对象相加</li>
<li>-：两个对象相减</li>
<li>*：两个数想乘，或是返回一个被重复若干次的字符串</li>
<li>/：两个对象相除</li>
<li>%：取模</li>
<li>**：幂运算，a**b相当于a^b</li>
<li>//: 取整除，返回商的整数部分,9//2=4，3.3//1.1=2.0</li>
</ul>
</li>
<li>Python成员运算符<ul>
<li>in ：如果在指定的序列中找到则返回Ture</li>
<li>not in：如果在指定序列中没有找到则返回True</li>
</ul>
</li>
<li>Python身份运算符<ul>
<li>is：is是判断两个标识符是不是引用自一个对象，如：x is y，如果id(x)等于id(y)，is返回结果1</li>
<li>is not：和上面返回结果相反</li>
</ul>
</li>
</ul>
<h4 id="Python条件语句"><a href="#Python条件语句" class="headerlink" title="Python条件语句"></a>Python条件语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> 判断条件：</div><div class="line">	执行语句……</div><div class="line"><span class="keyword">else</span>：</div><div class="line">	执行语句……</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> 判断条件：</div><div class="line">	执行语句……</div><div class="line"><span class="keyword">elif</span> 判断条件：</div><div class="line">	执行语句……</div><div class="line"><span class="keyword">else</span>：</div><div class="line">	执行语句……</div></pre></td></tr></table></figure>
<h4 id="Python循环语句"><a href="#Python循环语句" class="headerlink" title="Python循环语句"></a>Python循环语句</h4><ul>
<li><p>while循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> 判断条件：</div><div class="line">	执行语句……</div></pre></td></tr></table></figure>
</li>
<li><p>for循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</div><div class="line">	statements(s)</div></pre></td></tr></table></figure>
</li>
<li><p>循环中使用else语句<br>在Python中，for/while……else表示这样的意思，循环中的语句和普通的没有区别，else中的语句会在循环正常执行完（既循环不是通过break跳出而中断的）的情况下执行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">c = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> c&lt;<span class="number">5</span>:</div><div class="line">	<span class="keyword">print</span> c,<span class="string">"is less than 5"</span></div><div class="line">    c+=c;</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="keyword">print</span> c,<span class="string">"is not less than 5"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line"><span class="number">2</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line"><span class="number">3</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line"><span class="number">4</span> <span class="keyword">is</span> less than <span class="number">5</span></div><div class="line"><span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>break<br>break的用法和c语言一样，用来终止循环</p>
</li>
<li><p>continue<br>continue的用法和c语言也一样，用来跳出当前循环，然后继续执行下一轮循环</p>
</li>
</ul>
<h4 id="Python-pass语句"><a href="#Python-pass语句" class="headerlink" title="Python pass语句"></a>Python pass语句</h4><ul>
<li>python pass 是空语句，是为了保持程序结构的完整性</li>
<li>pass 不做任何事，一般只做占位语句<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'python'</span>:</div><div class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</div><div class="line">      <span class="keyword">pass</span></div><div class="line">      <span class="keyword">print</span> <span class="string">'这是 pass 块'</span></div><div class="line">   <span class="keyword">print</span> <span class="string">'当前字母 :'</span>, letter</div></pre></td></tr></table></figure>
</li>
</ul>
<p>输出为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">当前字母 : P</div><div class="line">当前字母 : y</div><div class="line">当前字母 : t</div><div class="line">这是 <span class="keyword">pass</span> 块</div><div class="line">当前字母 : h</div><div class="line">当前字母 : o</div><div class="line">当前字母 : n</div></pre></td></tr></table></figure></p>
<h4 id="Python数学函数"><a href="#Python数学函数" class="headerlink" title="Python数学函数"></a>Python数学函数</h4><ol>
<li>abs(x)    返回数字的绝对值，如abs(-10) 返回 10</li>
<li>ceil(x)    返回数字的上入整数，如math.ceil(4.1) 返回 5</li>
<li>cmp(x, y)    如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</li>
<li>exp(x)    返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</li>
<li>fabs(x)    返回数字的绝对值，如math.fabs(-10) 返回10.0</li>
<li>floor(x)    返回数字的下舍整数，如math.floor(4.9)返回 4</li>
<li>log(x)    如math.log(math.e)返回1.0,math.log(100,10)返回2.0</li>
<li>log10(x)    返回以10为基数的x的对数，如math.log10(100)返回 2.0</li>
<li>max(x1, x2,…)    返回给定参数的最大值，参数可以为序列。</li>
<li>min(x1, x2,…)    返回给定参数的最小值，参数可以为序列。</li>
<li>modf(x)    返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</li>
<li>pow(x, y)    x**y 运算后的值。</li>
<li>round(x [,n])    返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</li>
<li>sqrt(x)    返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j</li>
</ol>
<h4 id="Python随机函数"><a href="#Python随机函数" class="headerlink" title="Python随机函数"></a>Python随机函数</h4><ol>
<li>choice(seq)    从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</li>
<li>randrange ([start,] stop [,step])    从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</li>
<li>random()    随机生成下一个实数，它在[0,1)范围内。</li>
<li>seed([x])    改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li>
<li>shuffle(lst)    将序列的所有元素随机排序</li>
<li>uniform(x, y)    随机生成下一个实数，它在[x,y]范围内。</li>
</ol>
<h4 id="Python三角函数"><a href="#Python三角函数" class="headerlink" title="Python三角函数"></a>Python三角函数</h4><ol>
<li>acos(x)    返回x的反余弦弧度值。</li>
<li>asin(x)    返回x的反正弦弧度值。    </li>
<li>atan(x)    返回x的反正切弧度值。</li>
<li>atan2(y, x)    返回给定的 X 及 Y 坐标值的反正切值。</li>
<li>cos(x)    返回x的弧度的余弦值。</li>
<li>hypot(x, y)    返回欧几里德范数 sqrt(x<em>x + y</em>y)。</li>
<li>sin(x)    返回的x弧度的正弦值。</li>
<li>tan(x)    返回x弧度的正切值。</li>
<li>degrees(x)    将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</li>
<li>radians(x)    将角度转换为弧度</li>
</ol>
<h4 id="Python数学常量"><a href="#Python数学常量" class="headerlink" title="Python数学常量"></a>Python数学常量</h4><ol>
<li>pi    数学常量 pi（圆周率，一般以π来表示）</li>
<li>e    数学常量 e，e即自然常数（自然常数）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python学习之路-基础
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>java 字符串</title>
    <link href="http://yoursite.com/2016/08/09/java-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2016/08/09/java-字符串/</id>
    <published>2016-08-09T02:46:20.000Z</published>
    <updated>2016-08-09T05:33:41.084Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul>
<li>String 对象是不可变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abcd"</span>;</div><div class="line">System.out.println(str);</div><div class="line">str = <span class="string">"dcba"</span>;</div><div class="line">System.out.println(str);</div><div class="line"><span class="comment">/*OutPut：</span></div><div class="line">abcd</div><div class="line">dcba</div><div class="line">*/<span class="comment">//：~</span></div></pre></td></tr></table></figure>
<p>虽然从上面的程序可以看出，str的值改变了，其实，在执行str = “dcba”这句时，执行的是str = new String(“dcba”)，只是将str这个引用指向了在堆内存中的dcba，并没有改变对象。</p>
<ul>
<li>用“+”连接String</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str = <span class="string">"abcd"</span>;</div><div class="line">		String s = str+<span class="string">"12345ef"</span>+<span class="number">12</span>;</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">/*OutPut：</span></div><div class="line">abcd12345ef12</div><div class="line">*/<span class="comment">//：~</span></div></pre></td></tr></table></figure>
<p>在执行上面String中的“+”操作符时，实际上是，先创建一个StringBuilder对象，然后调用append方法，实现字符串的连接。</p>
<h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><ul>
<li>String是字符串常量，不可更改，StringBuffer是字符串变量，可以修改，是线程安全的</li>
<li>常用的方法：<ul>
<li>append：在末尾添加元素</li>
<li>length：字符串长度</li>
<li>delete（int start,int end）：删除从start开始到end结束的字符串</li>
</ul>
</li>
</ul>
<h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><ul>
<li>StringBuilder和StringBuffer用法一样，但是不是线程安全的</li>
</ul>
<h4 id="String、StringBuffer和StringBuilder的区别"><a href="#String、StringBuffer和StringBuilder的区别" class="headerlink" title="String、StringBuffer和StringBuilder的区别"></a>String、StringBuffer和StringBuilder的区别</h4><ol>
<li>String是字符串常量，不可变，StringBuffer和StringBuilder是字符串变量，可以修改</li>
<li>StringBuffer是线程安全的，StringBuilder是线程不安全的</li>
<li>由于StringBuffer是线程安全的，所以速度比StringBuilder慢，大部分情况下，StringBuffer比String快</li>
</ol>
]]></content>
    
    <summary type="html">
    
      java 字符串
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="StringBuilder" scheme="http://yoursite.com/tags/StringBuilder/"/>
    
      <category term="StringBuffer" scheme="http://yoursite.com/tags/StringBuffer/"/>
    
  </entry>
  
  <entry>
    <title>java 内部类</title>
    <link href="http://yoursite.com/2016/08/03/java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2016/08/03/java-内部类/</id>
    <published>2016-08-03T01:57:57.000Z</published>
    <updated>2016-08-03T05:46:09.816Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类顾名思义，就是在一个类中定义的类,如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用法：</p>
<ul>
<li>创建内部类对象时，要用外部类的对象来创建。<br>要想创建inner对象，必须先创建outter对象，具体方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Outter out = <span class="keyword">new</span> outter();</div><div class="line">Outter.Inner in = out.new Inner();</div></pre></td></tr></table></figure>
<p>当然，也可以这样创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">to</span><span class="params">()</span></span></div><div class="line">    	return new <span class="title">Inner</span><span class="params">()</span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">	Outter out = <span class="keyword">new</span> Outter();</div><div class="line">    Outter.Inner in = out.to();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果要生成对外部类对象的引用，可以使用外部类的名字.this，如：Outter.this，这一点在编译期就被知晓并受到检查，在运行期没有开销。</li>
<li>内部类可以访问外围类对象的所有成员，而不需要任何特殊条件，如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Object <span class="title">current</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squence</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object[] items;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Squence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">		items = <span class="keyword">new</span> Object[size];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object x)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (next &lt; items.length)</div><div class="line">			items[next++] = x;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> i == items.length;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">current</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> items[i];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (i &lt; items.length)</div><div class="line">				i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Selector <span class="title">selector</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SequenceSelector();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Squence sequence = <span class="keyword">new</span> Squence(<span class="number">10</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">			sequence.add(Integer.toString(i));</div><div class="line">		Selector selector = sequence.selector();</div><div class="line">		<span class="keyword">while</span> (!selector.end()) &#123;</div><div class="line">			System.out.print(selector.current() + <span class="string">" "</span>);</div><div class="line">			selector.next();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面就是一个简单迭代器的实现，可以通过内部类可以访问外围类的所有元素。<br>这个例子中还用到了向上转型，将SequenceSelector类向上转型为其基类Selector，这样就完全隐藏了实现细节，对以后的设计有很大的帮助。</p>
<ul>
<li>在方法和作用域内的内部类，就是在方法或作用域中定义内部类，内部类的作用范围变小。</li>
<li>匿名内部类，没有名字的内部类，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Test <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Test()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter out = <span class="keyword">new</span> Outter();</div><div class="line">		Test t = out.test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面为下面的简化形式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span> <span class="keyword">implements</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Test <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Abc();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter out = <span class="keyword">new</span> Outter();</div><div class="line">		Test t = out.test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在匿名内部类中要直接使用外围类中的参数，那么此参数必须定义为final类型，如果不是直接使用，不用定义成final类型，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;&#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">final</span> <span class="keyword">int</span> m,<span class="keyword">final</span> <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> A(x)&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">        	System.out.println(<span class="string">"sum="</span>+(m+n));</div><div class="line">        &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      java 内部类的用法
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="内部类" scheme="http://yoursite.com/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
      <category term="匿名内部类" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux  压缩与归档</title>
    <link href="http://yoursite.com/2016/08/02/Linux-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%BD%92%E6%A1%A3/"/>
    <id>http://yoursite.com/2016/08/02/Linux-压缩与归档/</id>
    <published>2016-08-02T08:53:02.000Z</published>
    <updated>2016-08-02T15:47:25.422Z</updated>
    
    <content type="html"><![CDATA[<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><h5 id="压缩之-gz"><a href="#压缩之-gz" class="headerlink" title="压缩之.gz"></a>压缩之.gz</h5><ol>
<li>gzip<ul>
<li>使用方法<ul>
<li>gzip somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>gzip -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>gzip -d filename.gz: 解压文件（解压后会删除原文件）</li>
</ul>
</li>
</ul>
</li>
<li>gunzip<ul>
<li>使用方法<ul>
<li>gunzip filename.gz:解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>zcat<ul>
<li>使用方法<ul>
<li>zcat filename.gz: 查看压缩文件的内容  </li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="压缩之-bz2"><a href="#压缩之-bz2" class="headerlink" title="压缩之.bz2"></a>压缩之.bz2</h5><ol>
<li>bzip2<ul>
<li>使用方法<ul>
<li>bzip2 somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>bzip2 -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>bzip2 -d filename.bz2: 解压文件（解压后会删除原文件）</li>
<li>bzip2 -k filename: 保留原文件</li>
</ul>
</li>
</ul>
</li>
<li>bunzip2<ul>
<li>使用方法<ul>
<li>bunzip2 filename.bz2:解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>bzcat<ul>
<li>使用方法<ul>
<li>bzcat filename.bz2: 查看压缩文件的内容</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="压缩之-xz"><a href="#压缩之-xz" class="headerlink" title="压缩之.xz"></a>压缩之.xz</h5><ol>
<li>xz<ul>
<li>使用方法<ul>
<li>xz somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>xz -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>xz -d filename.xz：解压文件（解压后会删除原文件）</li>
<li>xz -k filename：保留原文件</li>
</ul>
</li>
</ul>
</li>
<li>unxz<ul>
<li>使用方法<ul>
<li>unxz filename.xz：解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>xzcat<ul>
<li>使用方法<ul>
<li>xzcat filename.xz：查看压缩文件的内容</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><ul>
<li>tar<ul>
<li>使用方法<ul>
<li>tar -c：创建归档文件</li>
<li>tar -f file.tar：操作归档文件</li>
<li>tar -x：展开归档</li>
<li>tar –xattrs：归档时，保留文件的扩展属性信息</li>
<li>tar -t：不展开归档，直接查看归档了哪些文件</li>
<li>tar -zcf filename.tar.gz filename：归档文件，然后用gzip压缩</li>
<li>tar -zxf filename.tar.gz：调用gzip解压并展开归档，-z选项可以省略</li>
<li>tar -jcf filename.tar.bz2 filename：归档文件，然后用bzip2压缩</li>
<li>tar -jxf filename.tar.bz2：调用bzip2解压并展开归档，-j选项可以省略</li>
<li>tar -Jcf filename.tar.xz filename：归档文件，然后用xz压缩</li>
<li>tar -Jxf filename.tar.xz：调用xz解压并展开归档，-J选项可以省略</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Linux 压缩与归档
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="压缩" scheme="http://yoursite.com/tags/%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="归档" scheme="http://yoursite.com/tags/%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基础命令</title>
    <link href="http://yoursite.com/2016/08/01/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/08/01/Linux-基础命令/</id>
    <published>2016-08-01T12:15:11.000Z</published>
    <updated>2016-08-02T01:31:45.672Z</updated>
    
    <content type="html"><![CDATA[<p>ls：列出目录的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -l directoryname：显示directoryname里文件的详细信息，当没有directoryname时，显示当前所在的目录</div><div class="line">ls -h directoryname：做单位转换,和-l一块使用，也就是ls -lh directoryname</div><div class="line">ls -a directoryname：可以显示全部文件，包括隐藏文件，其中 . 代表当前目录， .. 代表父目录</div><div class="line">ls -A directoryname：和 -a 一样，但不显示“ . 和 .. ”</div><div class="line">ls -d directoryname：显示当前所在目录的的名字，如果没有directoryname，则显示为 .</div><div class="line">ls -i directoryname：显示每个文件和对用inode号</div><div class="line">ls -r directoryname: 逆序输出</div><div class="line">ls -R directoryname：递归显示</div></pre></td></tr></table></figure></p>
<p>cd：改变目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd directoryname：进入到directoryname这个目录（~代表当前用户的家目录）</div><div class="line">cd ~username：进入到username的家目录</div><div class="line">cd —：进入上一次所在的目录</div><div class="line">cd ：进入当前目录的家目录</div></pre></td></tr></table></figure></p>
<p>cat：合并文件和打印到标准输出（查看文件内容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat filename：显示filename中的内容（filename可以有多个，中间用空格隔开）</div></pre></td></tr></table></figure></p>
<p>type：显示命令类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type command：显示command的类型（内部命令或者外部命令）</div></pre></td></tr></table></figure></p>
<p>获取命令帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">外部命令：command --help</div><div class="line">内部命令：help command</div><div class="line">命令手册：man command</div><div class="line">命令的功能简要说明：whatis command</div><div class="line">在线文档：info command</div></pre></td></tr></table></figure></p>
<p>man：命令手册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">man command内容大概有：</div><div class="line">    NAME：命令名称及功能简要说明</div><div class="line">    SYNOPSIS：用法说明，包括可用的选项</div><div class="line">    DESCRIPTION：命令功能的详尽说明，可能包括每一个选项的意义</div><div class="line">    OPTIONS：说明每一个选项的意义</div><div class="line">    FILES：此命令相关的配置文件</div><div class="line">    EXAMPLES：使用示例</div><div class="line">    SEE ALSO：另外参照</div></pre></td></tr></table></figure></p>
<p>date和cal（日历）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">date: 显示当前时间</div><div class="line">cal [[day] [month] [year]]： 显示日历</div></pre></td></tr></table></figure></p>
<p>echo:输出文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo -e:开启逃逸字符</div><div class="line">ehco -E：关闭逃逸字符（默认）</div></pre></td></tr></table></figure></p>
<p>file<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file filename/directoryname：确定filename/directoryname的类型</div></pre></td></tr></table></figure></p>
<p>install：复制文件和设置属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install -d directoryname：创建目录</div><div class="line">inatall -t src dest：复制文件</div></pre></td></tr></table></figure></p>
<p>查看文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat：如上文</div><div class="line">tac：倒序输出</div><div class="line">less：可以分屏查看长文件</div><div class="line">more：可以分屏查看长文件</div><div class="line">head -#：#代表数字，可以查看前#行</div><div class="line">tail -#：可以查看后#行</div></pre></td></tr></table></figure></p>
<p>pwd：显示当前的绝对路径<br>mkdir directoryname：创建目录<br>rmdir directoryname：删除目录<br>cp src dest：复制文件，-r可以赋值目录<br>mv src dest：移动文件</p>
]]></content>
    
    <summary type="html">
    
      Linux 基础命令
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
