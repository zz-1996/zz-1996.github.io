<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>For Light&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-09T05:33:41.084Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 字符串</title>
    <link href="http://yoursite.com/2016/08/09/java-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2016/08/09/java-字符串/</id>
    <published>2016-08-09T02:46:20.000Z</published>
    <updated>2016-08-09T05:33:41.084Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul>
<li>String 对象是不可变的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"abcd"</span>;</div><div class="line">System.out.println(str);</div><div class="line">str = <span class="string">"dcba"</span>;</div><div class="line">System.out.println(str);</div><div class="line"><span class="comment">/*OutPut：</span></div><div class="line">abcd</div><div class="line">dcba</div><div class="line">*/<span class="comment">//：~</span></div></pre></td></tr></table></figure>
<p>虽然从上面的程序可以看出，str的值改变了，其实，在执行str = “dcba”这句时，执行的是str = new String(“dcba”)，只是将str这个引用指向了在堆内存中的dcba，并没有改变对象。</p>
<ul>
<li>用“+”连接String</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String str = <span class="string">"abcd"</span>;</div><div class="line">		String s = str+<span class="string">"12345ef"</span>+<span class="number">12</span>;</div><div class="line">		System.out.println(s);</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">/*OutPut：</span></div><div class="line">abcd12345ef12</div><div class="line">*/<span class="comment">//：~</span></div></pre></td></tr></table></figure>
<p>在执行上面String中的“+”操作符时，实际上是，先创建一个StringBuilder对象，然后调用append方法，实现字符串的连接。</p>
<h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><ul>
<li>String是字符串常量，不可更改，StringBuffer是字符串变量，可以修改，是线程安全的</li>
<li>常用的方法：<ul>
<li>append：在末尾添加元素</li>
<li>length：字符串长度</li>
<li>delete（int start,int end）：删除从start开始到end结束的字符串</li>
</ul>
</li>
</ul>
<h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><ul>
<li>StringBuilder和StringBuffer用法一样，但是不是线程安全的</li>
</ul>
<h4 id="String、StringBuffer和StringBuilder的区别"><a href="#String、StringBuffer和StringBuilder的区别" class="headerlink" title="String、StringBuffer和StringBuilder的区别"></a>String、StringBuffer和StringBuilder的区别</h4><ol>
<li>String是字符串常量，不可变，StringBuffer和StringBuilder是字符串变量，可以修改</li>
<li>StringBuffer是线程安全的，StringBuilder是线程不安全的</li>
<li>由于StringBuffer是线程安全的，所以速度比StringBuilder慢，大部分情况下，StringBuffer比String快</li>
</ol>
]]></content>
    
    <summary type="html">
    
      java 字符串
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="StringBuilder" scheme="http://yoursite.com/tags/StringBuilder/"/>
    
      <category term="StringBuffer" scheme="http://yoursite.com/tags/StringBuffer/"/>
    
  </entry>
  
  <entry>
    <title>java 内部类</title>
    <link href="http://yoursite.com/2016/08/03/java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2016/08/03/java-内部类/</id>
    <published>2016-08-03T01:57:57.000Z</published>
    <updated>2016-08-03T05:46:09.816Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类顾名思义，就是在一个类中定义的类,如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用法：</p>
<ul>
<li>创建内部类对象时，要用外部类的对象来创建。<br>要想创建inner对象，必须先创建outter对象，具体方法如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Outter out = <span class="keyword">new</span> outter();</div><div class="line">Outter.Inner in = out.new Inner();</div></pre></td></tr></table></figure>
<p>当然，也可以这样创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">to</span><span class="params">()</span></span></div><div class="line">    	return new <span class="title">Inner</span><span class="params">()</span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">	Outter out = <span class="keyword">new</span> Outter();</div><div class="line">    Outter.Inner in = out.to();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果要生成对外部类对象的引用，可以使用外部类的名字.this，如：Outter.this，这一点在编译期就被知晓并受到检查，在运行期没有开销。</li>
<li>内部类可以访问外围类对象的所有成员，而不需要任何特殊条件，如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span></span>;</div><div class="line">	<span class="function">Object <span class="title">current</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squence</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object[] items;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> next = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Squence</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">		items = <span class="keyword">new</span> Object[size];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object x)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (next &lt; items.length)</div><div class="line">			items[next++] = x;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceSelector</span> <span class="keyword">implements</span> <span class="title">Selector</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> i == items.length;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">current</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> items[i];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (i &lt; items.length)</div><div class="line">				i++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Selector <span class="title">selector</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SequenceSelector();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Squence sequence = <span class="keyword">new</span> Squence(<span class="number">10</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">			sequence.add(Integer.toString(i));</div><div class="line">		Selector selector = sequence.selector();</div><div class="line">		<span class="keyword">while</span> (!selector.end()) &#123;</div><div class="line">			System.out.print(selector.current() + <span class="string">" "</span>);</div><div class="line">			selector.next();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面就是一个简单迭代器的实现，可以通过内部类可以访问外围类的所有元素。<br>这个例子中还用到了向上转型，将SequenceSelector类向上转型为其基类Selector，这样就完全隐藏了实现细节，对以后的设计有很大的帮助。</p>
<ul>
<li>在方法和作用域内的内部类，就是在方法或作用域中定义内部类，内部类的作用范围变小。</li>
<li>匿名内部类，没有名字的内部类，如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Test <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Test()&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter out = <span class="keyword">new</span> Outter();</div><div class="line">		Test t = out.test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面为下面的简化形式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span> <span class="keyword">implements</span> <span class="title">Test</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> Test <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Abc();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter out = <span class="keyword">new</span> Outter();</div><div class="line">		Test t = out.test();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在匿名内部类中要直接使用外围类中的参数，那么此参数必须定义为final类型，如果不是直接使用，不用定义成final类型，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;&#125;</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">final</span> <span class="keyword">int</span> m,<span class="keyword">final</span> <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> A(x)&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">        	System.out.println(<span class="string">"sum="</span>+(m+n));</div><div class="line">        &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      java 内部类的用法
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="内部类" scheme="http://yoursite.com/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
      <category term="匿名内部类" scheme="http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux  压缩与归档</title>
    <link href="http://yoursite.com/2016/08/02/Linux-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%BD%92%E6%A1%A3/"/>
    <id>http://yoursite.com/2016/08/02/Linux-压缩与归档/</id>
    <published>2016-08-02T08:53:02.000Z</published>
    <updated>2016-08-02T15:47:25.422Z</updated>
    
    <content type="html"><![CDATA[<h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><h5 id="压缩之-gz"><a href="#压缩之-gz" class="headerlink" title="压缩之.gz"></a>压缩之.gz</h5><ol>
<li>gzip<ul>
<li>使用方法<ul>
<li>gzip somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>gzip -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>gzip -d filename.gz: 解压文件（解压后会删除原文件）</li>
</ul>
</li>
</ul>
</li>
<li>gunzip<ul>
<li>使用方法<ul>
<li>gunzip filename.gz:解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>zcat<ul>
<li>使用方法<ul>
<li>zcat filename.gz: 查看压缩文件的内容  </li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="压缩之-bz2"><a href="#压缩之-bz2" class="headerlink" title="压缩之.bz2"></a>压缩之.bz2</h5><ol>
<li>bzip2<ul>
<li>使用方法<ul>
<li>bzip2 somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>bzip2 -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>bzip2 -d filename.bz2: 解压文件（解压后会删除原文件）</li>
<li>bzip2 -k filename: 保留原文件</li>
</ul>
</li>
</ul>
</li>
<li>bunzip2<ul>
<li>使用方法<ul>
<li>bunzip2 filename.bz2:解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>bzcat<ul>
<li>使用方法<ul>
<li>bzcat filename.bz2: 查看压缩文件的内容</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="压缩之-xz"><a href="#压缩之-xz" class="headerlink" title="压缩之.xz"></a>压缩之.xz</h5><ol>
<li>xz<ul>
<li>使用方法<ul>
<li>xz somefile：压缩完成后会删除原文件（不能压缩目录）</li>
<li>xz -# somefile：按指定压缩比压缩文件，#（1-9）</li>
<li>xz -d filename.xz：解压文件（解压后会删除原文件）</li>
<li>xz -k filename：保留原文件</li>
</ul>
</li>
</ul>
</li>
<li>unxz<ul>
<li>使用方法<ul>
<li>unxz filename.xz：解压文件并删除原文件</li>
</ul>
</li>
</ul>
</li>
<li>xzcat<ul>
<li>使用方法<ul>
<li>xzcat filename.xz：查看压缩文件的内容</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><ul>
<li>tar<ul>
<li>使用方法<ul>
<li>tar -c：创建归档文件</li>
<li>tar -f file.tar：操作归档文件</li>
<li>tar -x：展开归档</li>
<li>tar –xattrs：归档时，保留文件的扩展属性信息</li>
<li>tar -t：不展开归档，直接查看归档了哪些文件</li>
<li>tar -zcf filename.tar.gz filename：归档文件，然后用gzip压缩</li>
<li>tar -zxf filename.tar.gz：调用gzip解压并展开归档，-z选项可以省略</li>
<li>tar -jcf filename.tar.bz2 filename：归档文件，然后用bzip2压缩</li>
<li>tar -jxf filename.tar.bz2：调用bzip2解压并展开归档，-j选项可以省略</li>
<li>tar -Jcf filename.tar.xz filename：归档文件，然后用xz压缩</li>
<li>tar -Jxf filename.tar.xz：调用xz解压并展开归档，-J选项可以省略</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Linux 压缩与归档
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="压缩" scheme="http://yoursite.com/tags/%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="归档" scheme="http://yoursite.com/tags/%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基础命令</title>
    <link href="http://yoursite.com/2016/08/01/Linux-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/08/01/Linux-基础命令/</id>
    <published>2016-08-01T12:15:11.000Z</published>
    <updated>2016-08-02T01:31:45.672Z</updated>
    
    <content type="html"><![CDATA[<p>ls：列出目录的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls -l directoryname：显示directoryname里文件的详细信息，当没有directoryname时，显示当前所在的目录</div><div class="line">ls -h directoryname：做单位转换,和-l一块使用，也就是ls -lh directoryname</div><div class="line">ls -a directoryname：可以显示全部文件，包括隐藏文件，其中 . 代表当前目录， .. 代表父目录</div><div class="line">ls -A directoryname：和 -a 一样，但不显示“ . 和 .. ”</div><div class="line">ls -d directoryname：显示当前所在目录的的名字，如果没有directoryname，则显示为 .</div><div class="line">ls -i directoryname：显示每个文件和对用inode号</div><div class="line">ls -r directoryname: 逆序输出</div><div class="line">ls -R directoryname：递归显示</div></pre></td></tr></table></figure></p>
<p>cd：改变目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd directoryname：进入到directoryname这个目录（~代表当前用户的家目录）</div><div class="line">cd ~username：进入到username的家目录</div><div class="line">cd —：进入上一次所在的目录</div><div class="line">cd ：进入当前目录的家目录</div></pre></td></tr></table></figure></p>
<p>cat：合并文件和打印到标准输出（查看文件内容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat filename：显示filename中的内容（filename可以有多个，中间用空格隔开）</div></pre></td></tr></table></figure></p>
<p>type：显示命令类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type command：显示command的类型（内部命令或者外部命令）</div></pre></td></tr></table></figure></p>
<p>获取命令帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">外部命令：command --help</div><div class="line">内部命令：help command</div><div class="line">命令手册：man command</div><div class="line">命令的功能简要说明：whatis command</div><div class="line">在线文档：info command</div></pre></td></tr></table></figure></p>
<p>man：命令手册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">man command内容大概有：</div><div class="line">    NAME：命令名称及功能简要说明</div><div class="line">    SYNOPSIS：用法说明，包括可用的选项</div><div class="line">    DESCRIPTION：命令功能的详尽说明，可能包括每一个选项的意义</div><div class="line">    OPTIONS：说明每一个选项的意义</div><div class="line">    FILES：此命令相关的配置文件</div><div class="line">    EXAMPLES：使用示例</div><div class="line">    SEE ALSO：另外参照</div></pre></td></tr></table></figure></p>
<p>date和cal（日历）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">date: 显示当前时间</div><div class="line">cal [[day] [month] [year]]： 显示日历</div></pre></td></tr></table></figure></p>
<p>echo:输出文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo -e:开启逃逸字符</div><div class="line">ehco -E：关闭逃逸字符（默认）</div></pre></td></tr></table></figure></p>
<p>file<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file filename/directoryname：确定filename/directoryname的类型</div></pre></td></tr></table></figure></p>
<p>install：复制文件和设置属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">install -d directoryname：创建目录</div><div class="line">inatall -t src dest：复制文件</div></pre></td></tr></table></figure></p>
<p>查看文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat：如上文</div><div class="line">tac：倒序输出</div><div class="line">less：可以分屏查看长文件</div><div class="line">more：可以分屏查看长文件</div><div class="line">head -#：#代表数字，可以查看前#行</div><div class="line">tail -#：可以查看后#行</div></pre></td></tr></table></figure></p>
<p>pwd：显示当前的绝对路径<br>mkdir directoryname：创建目录<br>rmdir directoryname：删除目录<br>cp src dest：复制文件，-r可以赋值目录<br>mv src dest：移动文件</p>
]]></content>
    
    <summary type="html">
    
      Linux 基础命令
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
